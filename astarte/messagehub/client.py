from __future__ import annotations

import time
import uuid
from pathlib import Path
from collections.abc import Callable
from threading import Thread, Event

import grpc

# pylint: disable=import-error
from astarteplatform.msghub import message_hub_service_pb2_grpc as message_hub
from astarteplatform.msghub import node_pb2 as node
from astarteplatform.msghub import astarte_message_pb2 as astarte_message

# pylint: enable=import-error


class Client:
    """
    Basic class to define a new Node on the Message Hub
    """

    def __init__(self, client_id: uuid.UUID | None, interfaces_dir: str):
        """
        Client class' constructor

        Parameters
        ----------
        client_id: UUID optional
            Unique identifier of the current Client.

        interfaces_dir: str
            Path to the directory containing the .json interface files
        """
        self.on_data_received: Callable[[astarte_message.AstarteMessage], None] | None = None

        self.__node: node.Node | None = None
        self.__stub: message_hub.MessageHubStub | None = None
        self.__message_handler_thread_kill_switch: Event | None = None
        self.__client_id = str(client_id or uuid.uuid4())
        self.__interfaces_dir = Path(interfaces_dir)

        if not self.__interfaces_dir.exists():
            raise FileNotFoundError(f'"{self.__interfaces_dir}" does not exist')
        if not self.__interfaces_dir.is_dir():
            raise NotADirectoryError(f'"{self.__interfaces_dir}" is not a directory')

    def interfaces_to_bytearray(self) -> list[bytes]:
        """
        Function that retrieves all the json files from the interfaces directory and get the
        content as bytes.

        Returns
        -------
        list[bytes]
            A list of all the interfaces' JSON read as bytes
        """
        result = []
        for interface_file in [i for i in self.__interfaces_dir.iterdir() if i.suffix == ".json"]:
            with open(interface_file, "r", encoding="utf-8") as interface_fp:
                result.append(bytes(interface_fp.read()))
        return result

    async def message_handler(self, grpc_channel: grpc, kill_switch: Event):
        """
        Function that looks for messages in the grpc_channel and pass them on to the defined
        callback

        Parameters
        ----------
        grpc_channel
            Grpc channel bringing the messages. Generated by the
            :func:`astarteplatform.msghub.message_hub_service_pb2_grpc.MessageHubStub.Attach` method
        kill_switch: Event
            Event that triggers this function closing if the channel is not dropped. To close call
            `kill_switch.set()`
        """
        while not (kill_switch and kill_switch.is_set()):
            response = await grpc_channel.read()
            if response == grpc.aio.EOF:
                break
            self.on_data_received(response.message)
            time.sleep(1)

    def connect(self, address: str = "localhost", port: int = 50051):
        """
        Function to connect the device to the message_hub

        Parameters
        ----------
        address: str, default="localhost
            The message hub URL
        port: int, default=50051
            The message hub port

        """
        self.__node = node.Node(self.__client_id, self.interfaces_to_bytearray())
        with grpc.insecure_channel(f"{address}:{port}") as channel:
            self.__stub = message_hub.MessageHubStub(channel)
            grpc_channel = self.__stub.Attach(self.__node)
            kill_switch = Event()
            message_handler_thread = Thread(
                target=self.message_handler, args=(grpc_channel, kill_switch), daemon=True
            )
            message_handler_thread.start()

    def disconnect(self):
        """
        Function to disconnect the current device from the message_hub
        """
        self.__stub.Detach(self.__node)
        self.__node = None
        self.__message_handler_thread_kill_switch.set()
